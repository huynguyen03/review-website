import React, { useState, useEffect, useCallback } from "react";
import { Container, Button, Card, ListGroup, Row, Col } from "react-bootstrap";
import ScoreCalculator from "./ScoreCalculator";
import ReviewAnswers from "./ReviewAnswers";
import ExamResult from "./ExamResult";

const RealExam = ({ exam, studentId, onBack }) => {
  const [isStarted, setIsStarted] = useState(false);
  const [timeLeft, setTimeLeft] = useState(exam.time_limit * 60);
  const [questions, setQuestions] = useState([]);
  const [answers, setAnswers] = useState({});
  const [showResultPage, setShowResultPage] = useState(false);
  const [showReviewPage, setShowReviewPage] = useState(false);
  const [finalScore, setFinalScore] = useState(null);
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [isResultSent, setIsResultSent] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const QUESTIONS_PER_PAGE = 2;  // Gi·ªõi h·∫°n s·ªë c√¢u h·ªèi m·ªói trang


  const [isScoreCalculated, setIsScoreCalculated] = useState(false); // üîπ Th√™m state ki·ªÉm so√°t t√≠nh ƒëi·ªÉm
  const [analysis, setAnalysis] = useState(null); // üîπ Th√™m state ƒë·ªÉ l∆∞u analysis t·ª´ ScoreCalculator
  const [isRandomExam, setIsRandomExam] = useState(false); // Tr·∫°ng th√°i b√†i thi c√¢u h·ªèi ng·∫´u nhi√™n


  const apiUrl = process.env.REACT_APP_API_BASE_URL;

 
// H√†m ki·ªÉm tra xem b√†i thi c√≥ l·∫•y c√¢u h·ªèi ng·∫´u nhi√™n kh√¥ng
const checkExamType = useCallback(async () => {
  try {
    const response = await fetch(`${apiUrl}/check_exam_type.php?exam_id=${exam.exam_id}`);
    
    if (!response.ok) {
      throw new Error(`L·ªói ki·ªÉm tra ki·ªÉu b√†i thi: ${response.status}`);
    }

    const data = await response.json();
    setIsRandomExam(data.is_random_question); // Gi·∫£ s·ª≠ API tr·∫£ v·ªÅ { is_random: true/false }
    console.log('b√†i th√¨ c√≥ random kh√¥ng: ', data.is_random_question)

  } catch (error) {
    console.error("L·ªói khi ki·ªÉm tra ki·ªÉu b√†i thi:", error);
  }

  // H√†m t·∫£i c√¢u h·ªèi c·ªßa b√†i thi (d√πng cho c·∫£ b√†i thi th√¥ng th∆∞·ªùng v√† ng·∫´u nhi√™n)
  const fetchQuestions = useCallback(async () => {
    try {
      const response = await fetch(`${apiUrl}/fetch_exam_questions.php?exam_id=${exam.exam_id}`);
      
      if (!response.ok) {
        throw new Error(`L·ªói t·∫£i c√¢u h·ªèi: ${response.status}`);
      }
  
      const data = await response.json();
      setQuestions(data);
      console.log("C√¢u h·ªèi nh·∫≠n v·ªÅ:", data);
    } catch (error) {
      console.error("L·ªói khi t·∫£i c√¢u h·ªèi:", error);
    }
  }, [exam.exam_id]);
// H√†m l·∫•y c√¢u h·ªèi ng·∫´u nhi√™n n·∫øu b√†i thi c√≥ l·∫•y c√¢u h·ªèi t·ª´ ng√¢n h√†ng
const fetchRandomQuestions = useCallback(async () => {
  try {
    const response = await fetch(`${apiUrl}/fetch_random_questions.php?exam_id=${exam.exam_id}`);
    
    if (!response.ok) {
      throw new Error(`L·ªói khi l·∫•y c√¢u h·ªèi ng·∫´u nhi√™n: ${response.status}`);
    }


    fetchQuestions();
  } catch (error) {
    console.error("L·ªói khi l·∫•y v√† l∆∞u c√¢u h·ªèi ng·∫´u nhi√™n:", error);
  }
}, [exam.exam_id, fetchQuestions]);


  // Nh·∫≠n ƒëi·ªÉm s·ªë t·ª´ ScoreCalculator (ch·ªâ g·ªçi khi n·ªôp b√†i)
  const handleScoreCalculated = (scoreDetails) => {
    if (finalScore) return; // N·∫øu ƒë√£ c√≥ ƒëi·ªÉm r·ªìi, kh√¥ng c·∫ßn g·ªçi l·∫°i
    console.log("üìä ƒêi·ªÉm s·ªë cu·ªëi c√πng:", scoreDetails);
    setFinalScore(scoreDetails);
  };

  const sendExamResult = useCallback(async (scoreDetails) => { 
    if (isResultSent || !scoreDetails) return;
    try {
      const response = await fetch(`${apiUrl}/submit_exam_result.php`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          exam_id: exam.exam_id,
          student_id: studentId,
          score: scoreDetails.totalScore,
          correct_counts: scoreDetails.correctCounts,
          total_counts: scoreDetails.totalCounts,
          percentages: scoreDetails.percentages,
          answers: answers,
        }),
      });
      console.log("g·ª≠i ƒëi·ªÉm ƒëi", exam.exam_id,
         studentId,
        scoreDetails.totalScore,
         scoreDetails.correctCounts,
        scoreDetails.totalCounts,
         scoreDetails.percentages,
         answers,)

  
      const textResponse = await response.text();
      try {
        const result = JSON.parse(textResponse);
        if (result.success) {
          console.log("‚úÖ ƒêi·ªÉm ƒë√£ l∆∞u th√†nh c√¥ng!");
          setIsResultSent(true);
        } else {
          console.error("‚ùå L·ªói khi l∆∞u ƒëi·ªÉm:", result.message);
        }
      } catch (jsonError) {
        console.error("üö® API kh√¥ng tr·∫£ v·ªÅ JSON h·ª£p l·ªá! Ph·∫£n h·ªìi t·ª´ server:", textResponse);
      }
    } catch (error) {
      console.error("üö® L·ªói khi g·ª≠i k·∫øt qu·∫£ b√†i thi:", error);
    }
  }, [isResultSent, exam.exam_id, studentId, answers]); // ‚úÖ ƒê√£ s·ª≠a
  
  // G·ª≠i ƒëi·ªÉm l√™n API m·ªôt l·∫ßn duy nh·∫•t
  useEffect(() => {
    if (finalScore && !isResultSent) {
      sendExamResult(finalScore);
    }
  }, [finalScore, isResultSent, sendExamResult]);

  // X·ª≠ l√Ω khi n·ªôp b√†i
  const handleFinalSubmit = useCallback(() => { 
    if (isSubmitted) return;
    console.log("üî¥ N·ªôp b√†i thi!");
    setIsStarted(false);
    setIsSubmitted(true);
    setShowResultPage(true);
  }, [isSubmitted]); // ‚úÖ ƒê√£ s·ª≠a
  

// T·ª± ƒë·ªông n·ªôp b√†i khi h·∫øt gi·ªù
useEffect(() => {
  if (!isStarted || isSubmitted) return;
  let timer = setInterval(() => {
    setTimeLeft((prev) => {
      if (prev <= 1) {
        handleFinalSubmit();
        clearInterval(timer);
        return 0;
      }
      return prev - 1;
    });
  }, 1000);
  return () => clearInterval(timer);
}, [isStarted, isSubmitted, handleFinalSubmit]); // ‚úÖ ƒê√£ s·ª≠a



  // Ghi l·∫°i c√¢u tr·∫£ l·ªùi c·ªßa h·ªçc sinh
  const handleAnswerChange = (questionId, selectedOption) => {
    if (!isSubmitted) {
      setAnswers((prev) => ({ ...prev, [questionId]: selectedOption }));
    }
  };

  // Chuy·ªÉn sang m√†n h√¨nh xem l·∫°i c√¢u tr·∫£ l·ªùi
  const handleReviewAnswers = () => setShowReviewPage(true);
  const handleBackToResult = () => setShowReviewPage(false);

  // L·ªçc danh s√°ch c√¢u h·ªèi theo trang
  const currentQuestions = questions.slice(
    (currentPage - 1) * QUESTIONS_PER_PAGE,
    currentPage * QUESTIONS_PER_PAGE
  );

  useEffect(() => {
    checkExamType();
  }, [checkExamType]); // Ch·∫°y m·ªôt l·∫ßn duy nh·∫•t khi component mount
  
  // Khi b√†i thi b·∫Øt ƒë·∫ßu, l·∫•y c√¢u h·ªèi ph√π h·ª£p
  useEffect(() => {
  
    if (isStarted) {
  
      if (isRandomExam) {
        fetchRandomQuestions(); // N·∫øu b√†i thi l·∫•y c√¢u h·ªèi ng·∫´u nhi√™n, g·ªçi API l·∫•y c√¢u h·ªèi t·ª´ ng√¢n h√†ng
      } else {
        fetchQuestions(); // N·∫øu b√†i thi b√¨nh th∆∞·ªùng, g·ªçi API l·∫•y c√¢u h·ªèi nh∆∞ c≈©
      }
    }
  }, [checkExamType, isStarted, isRandomExam, fetchQuestions, fetchRandomQuestions]);
}, [exam.exam_id]);

const currentQuestions = questions.slice((currentPage - 1) * QUESTIONS_PER_PAGE, currentPage * QUESTIONS_PER_PAGE);


return (
  <Container fluid>
    {showReviewPage ? (
      <ReviewAnswers
        questions={questions}
        answers={answers}
        onBackToResult={() => setShowReviewPage(false)}
      />
    ) : showResultPage ? (
      <ExamResult
        score={finalScore}
        analysis={analysis}
        onBackToHome={onBack}
        onReviewAnswers={handleReviewAnswers}
      />
    ) : (
      <Row>
        <Col md={9}>
          {!isStarted ? (
            <Card className="p-4 ">
              <h3>{exam.exam_name}</h3>
              <p><strong>Th·ªùi gian:</strong> {exam.time_limit} ph√∫t</p>
              <Button variant="secondary" onClick={onBack}>Quay l·∫°i</Button>{" "}
              <Button variant="primary" onClick={() => setIsStarted(true)}>B·∫Øt ƒë·∫ßu</Button>
            </Card>
          ) : (
            <Card className="p-4">
              <ListGroup>
                {currentQuestions.map((q, index) => (
                  <ListGroup.Item key={q.question_id} className="mb-3 text-start">
                    <strong>C√¢u {index + 1}: {q.question_text}</strong>

                    <div className="mt-2 d-flex flex-column">
                      {q.question_type === "multiple_choice" ? (
                        q.answer_options?.map((option, optionIndex) => (
                          <Button
                            key={`${q.question_id}-${optionIndex}`}
                            variant={answers[q.question_id] === option ? "success" : "outline-primary"}
                            className="mb-2 text-start"
                            style={{ width: "auto", maxWidth: "300px" }}
                            onClick={() => handleAnswerChange(q.question_id, option)}
                          >
                            {option}
                          </Button>
                        ))
                      ) : (
                        <div className="mt-2">
                          <label htmlFor={`answer-${q.question_id}`} className="form-label">ƒê√°p √°n c·ªßa b·∫°n l√†:</label>
                          <input
                            type="text"
                            id={`answer-${q.question_id}`}
                            className="form-control"
                            value={answers[q.question_id] || ""}
                            onChange={(e) => handleAnswerChange(q.question_id, e.target.value)}
                            placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi c·ªßa b·∫°n..."
                            style={{ maxWidth: "300px" }}
                          />
                        </div>
                      )}
                    </div>
                  </ListGroup.Item>
                ))}
              </ListGroup>

              <div className="pagination-controls mt-3 d-flex justify-content-between align-items-center">
                <Button
                  variant="secondary"
                  onClick={handlePreviousPage}
                  disabled={currentPage === 1}
                >
                  Trang tr∆∞·ªõc
                </Button>
                <div className="d-flex align-items-center">
                  <span>Trang {currentPage}</span>
                </div>
                <Button
                  variant="secondary"
                  onClick={handleNextPage}
                  disabled={currentPage * QUESTIONS_PER_PAGE >= questions.length}
                >
                  Trang ti·∫øp theo
                </Button>
              </div>
            </Card>
          )}
        </Col>

        {/* Sidebar ch·ªâ hi·ªÉn th·ªã khi ƒëang l√†m b√†i */}
        {isStarted && (
          <Col md={3}>
            <Card className="p-3 text-center">
              <h5><strong>{exam.exam_name}</strong></h5>
              <p>Th·ªùi gian c√≤n l·∫°i:</p>
              <h2>{Math.floor(timeLeft / 60)}:{String(timeLeft % 60).padStart(2, "0")}</h2>

              <div className="mt-3 d-flex flex-wrap justify-content-center">
                {questions.map((q, index) => (
                  <Button
                    key={q.question_id}
                    variant={answers[q.question_id] ? "success" : "outline-primary"}
                    className="m-1"
                    style={{ width: "40px", height: "40px", borderRadius: "50%" }}
                  >
                    {index + 1}
                  </Button>
                ))}
              </div>
              <Button
                className="mt-5"
                variant="danger"
                onClick={() => {
                  handleFinalSubmit();
                  deleteClonedQuestions(exam.exam_id);
                }}
              >N·ªôp b√†i</Button>
            </Card>
          </Col>
        )}
      </Row>
    )}
    {showResultPage && !isScoreCalculated && (
      <ScoreCalculator
        answers={answers}
        questions={questions}
        examId={exam.exam_id}
        studentId={localStorage.getItem("user_id")}
        userRole={userRole}
        onScoreCalculated={handleScoreCalculated}
      />
    )}
  </Container>
);
};

export default RealExam;

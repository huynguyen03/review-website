import React, { useState, useEffect, useCallback } from "react";
// import { useNavigate } from "react-router-dom";

import { Button, Card, Row, Col, Modal, Form, Spinner } from "react-bootstrap";
import axios from "axios";
import ExamSimulation from "./ExamSimulation";
import ExamStatistics from "./ExamStatistics";



const ClassroomPractice = ({ classroomId, userId, roleId }) => {
  const [publicExams, setPublicExams] = useState([]); // Danh s√°ch b√†i thi ƒë√£ t·∫°o
  const [examsClassrom, setExamsClassrom] = useState([]); // Danh s√°ch b√†i thi ƒë√£ th√™m v√†o l·ªõp h·ªçc
  const [showModal, setShowModal] = useState(false);
  const [showExamSimulation, setShowExamSimulation] = useState(false);
  const [exerciseTitle, setExerciseTitle] = useState("");
  const [exerciseContent, setExerciseContent] = useState("");
  const [showExamModal, setShowExamModal] = useState(false); // Modal hi·ªÉn th·ªã b√†i thi ƒë√£ t·∫°o
  const [selectedExam, setSelectedExam] = useState(null); // üîπ L∆∞u b√†i thi ƒë∆∞·ª£c ch·ªçn
  const [showStats, setShowStats] = useState(false);// qu·∫£n l√Ω hi·ªÉn th·ªã th·ªëng k√™ ƒëi·ªÉm s·ªë
  const [loading, setLoading] = useState(false);



  // Fetch danh s√°ch b√†i thi ƒë√£ t·∫°o t·ª´ API
  const fetchPublicExams = useCallback(async () => {
    setLoading(true)
    try {

      const response = await fetch(
        `http://localhost/react_api/fetch_completed_exams.php?user_id=${userId}`
      );
      const data = await response.json();
      setPublicExams(data); // C·∫≠p nh·∫≠t b√†i thi ƒë√£ t·∫°o
      console.log("B√†i thi l·∫•y v·ªÅ t·ª´ CSDL", data, userId);
    } catch (error) {
      console.error("‚ùå L·ªói l·∫•y danh s√°ch b√†i thi ƒë√£ t·∫°o:", error);
    } finally {
      setLoading(false)

    }
  }, [userId]);

  // Fetch c√°c b√†i thi ƒë√£ th√™m v√†o l·ªõp h·ªçc
  const fetchExamsForClassroom = useCallback(async () => {
    setLoading(true)
    try {
      const response = await axios.get(
        `http://localhost/react_api/fetch_classroom_exams.php?classroom_id=${classroomId}`
      );
      setExamsClassrom(response.data || []); // C·∫≠p nh·∫≠t b√†i thi ƒë√£ th√™m v√†o l·ªõp h·ªçc
      console.log("C√°c b√†i thi c√≥ trong l·ªõp h·ªçc", response.data)
    } catch (error) {
      console.error("‚ùå L·ªói l·∫•y danh s√°ch b√†i thi ƒë√£ th√™m v√†o l·ªõp h·ªçc:", error);
    } finally {
      setLoading(false)

    }
  }, [classroomId]);
  // G·ªçi API l·∫•y b√†i thi khi component mount
  useEffect(() => {
    fetchPublicExams(); // L·∫•y danh s√°ch b√†i thi ƒë√£ t·∫°o
    fetchExamsForClassroom(); // L·∫•y c√°c b√†i thi ƒë√£ th√™m v√†o l·ªõp h·ªçc
  }, [classroomId, userId, fetchPublicExams, fetchExamsForClassroom]); // Ch·∫°y l·∫°i khi `classroomId` ho·∫∑c `userId` thay ƒë·ªïi


  // ‚úÖ Th√™m b√†i thi ƒë√£ t·∫°o v√†o l·ªõp h·ªçc
  const handleAddExamToClassroom = async (examId) => {
    console.log("L·ªõp h·ªçc ID:", classroomId, "B√†i thi ID:", examId);
    setLoading(true)
    if (!examId) return;
    try {
      await axios.post("http://localhost/react_api/add_exam_to_classroom.php", {
        classroom_id: classroomId,
        exam_id: examId,
      });

      // Sau khi th√™m b√†i thi, g·ªçi l·∫°i ƒë·ªÉ c·∫≠p nh·∫≠t danh s√°ch b√†i thi trong l·ªõp h·ªçc
      fetchExamsForClassroom(); // C·∫≠p nh·∫≠t danh s√°ch b√†i thi ƒë√£ th√™m v√†o l·ªõp h·ªçc
      setShowExamModal(false); // ƒê√≥ng modal
    } catch (error) {
      console.error("‚ùå L·ªói th√™m b√†i thi v√†o l·ªõp h·ªçc:", error);
    } finally {
      setLoading(false)
    }
  };

  // ‚úÖ X√≥a b√†i thi ƒë√£ th√™m v√†o l·ªõp h·ªçc
  const handleDeleteExamFromClassroom = async (examId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b√†i thi n√†y kh·ªèi l·ªõp h·ªçc?")) return;

    try {
      await axios.post("http://localhost/react_api/delete_exam_from_classroom.php", {
        classroom_id: classroomId,
        exam_id: examId,
      });

      // Sau khi x√≥a b√†i thi, c·∫≠p nh·∫≠t l·∫°i danh s√°ch b√†i thi trong l·ªõp h·ªçc
      fetchExamsForClassroom();
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a b√†i thi kh·ªèi l·ªõp h·ªçc:", error);
    }
};

  // üõë H√†m ch·ªçn b√†i thi khi click "Thi th·ª≠"
  // const handleSelectExam = (exam) => {
  //   setSelectedExam(exam);
  //   navigate(`/teacher?section=my_quiz&action=exam&id=${exam.exam_id}`);
  // };

  const hanldeShowExamStatistics = (exam) => {
    setSelectedExam(exam);
    setShowStats(true);
  }


  if (selectedExam && showExamSimulation) {
    return <ExamSimulation exam={selectedExam} studentId={userId} onBack={() => setSelectedExam(null)} />;
  }
  return (
    <div>
      {loading ? (
        <div className="text-center mt-5">
          <Spinner animation="border" />
          <p>ƒêang t·∫£i d·ªØ li·ªáu...</p>
        </div>
      ) : (showStats ? (
        <ExamStatistics examId={selectedExam.exam_id} onClose={() => setShowStats(false)} />

      ) : (

        <>
          <h3>B√†i √¥n luy·ªán trong l·ªõp</h3>
          {
            roleId === "2" ? (
              <>
                <h4>B√†i thi c·ªßa l·ªõp h·ªçc</h4>
                <Row>
                  {examsClassrom.length > 0 ? (
                    examsClassrom.map((exam) => (
                      <Col key={exam.exam_id} md={6} className="mb-3">
                        <Card>
                          <Card.Body>
                            <Card.Title>{exam.exam_name}</Card.Title>
                            {/* ƒêi·ªÅu h∆∞·ªõng sang giao di·ªán thi th·ª≠ */}
                            <Button
                              variant="primary"
                              size="sm"
                              onClick={() => {setSelectedExam(exam); setShowExamSimulation(true)}} // üîπ Ch·ªçn b√†i thi tr∆∞·ªõc khi ƒëi·ªÅu h∆∞·ªõng
                            >
                              V√†o b√†i thi
                            </Button>
                          </Card.Body>
                        </Card>
                      </Col>
                    ))
                  ) : (
                    <p>üì¢ Ch∆∞a c√≥ b√†i thi n√†o ƒë∆∞·ª£c th√™m v√†o l·ªõp h·ªçc.</p>
                  )}
                </Row>

              </>

            ) : (
              <>
                <Button variant="primary" className="mb-3" onClick={() => setShowModal(true)}>
                  + Th√™m b√†i √¥n luy·ªán
                </Button>
                <Button variant="secondary" className="mb-3" onClick={() => setShowExamModal(true)}>
                  + Th√™m b√†i thi ƒë√£ t·∫°o
                </Button>
                {/* Hi·ªÉn th·ªã c√°c b√†i thi ƒë√£ th√™m v√†o l·ªõp h·ªçc */}
                <h4>B√†i thi ƒë√£ th√™m v√†o l·ªõp h·ªçc</h4>
                <Row>
                  {examsClassrom.length > 0 ? (
                    examsClassrom.map((exam) => (
                      <Col key={exam.exam_id} md={6} className="mb-3">
                        <Card>
                          <Card.Body>
                            <Card.Title>{exam.exam_name}</Card.Title>
                            <Button variant="primary" onClick={() => hanldeShowExamStatistics(exam)}>üìä Th·ªëng k√™ ƒëi·ªÉm s·ªë</Button>
                            <Button
                              variant="danger"
                              onClick={() => handleDeleteExamFromClassroom(exam.exam_id)}
                            >
                              X√≥a b√†i thi kh·ªèi l·ªõp h·ªçc
                            </Button>
                          </Card.Body>
                        </Card>
                      </Col>
                    ))
                  ) : (
                    <p>üì¢ Ch∆∞a c√≥ b√†i thi n√†o ƒë∆∞·ª£c th√™m v√†o l·ªõp h·ªçc.</p>
                  )}
                </Row>

                {/* Modal th√™m b√†i √¥n luy·ªán */}
                <Modal show={showModal} onHide={() => setShowModal(false)}>
                  <Modal.Header closeButton>
                    <Modal.Title>Th√™m b√†i √¥n luy·ªán</Modal.Title>
                  </Modal.Header>
                  <Modal.Body>
                    <Form>
                      <Form.Group controlId="exerciseTitle">
                        <Form.Label>Ti√™u ƒë·ªÅ b√†i √¥n luy·ªán</Form.Label>
                        <Form.Control
                          type="text"
                          value={exerciseTitle}
                          onChange={(e) => setExerciseTitle(e.target.value)}
                        />
                      </Form.Group>

                      <Form.Group controlId="exerciseContent">
                        <Form.Label>N·ªôi dung b√†i √¥n luy·ªán</Form.Label>
                        <Form.Control
                          as="textarea"
                          rows={4}
                          value={exerciseContent}
                          onChange={(e) => setExerciseContent(e.target.value)}
                        />
                      </Form.Group>

                      <Button variant="primary">Th√™m b√†i √¥n luy·ªán</Button>
                    </Form>
                  </Modal.Body>
                </Modal>

                {/* Modal th√™m b√†i thi ƒë√£ t·∫°o */}
                <Modal show={showExamModal} onHide={() => setShowExamModal(false)}>
                  <Modal.Header closeButton>
                    <Modal.Title>Ch·ªçn b√†i thi ƒë√£ t·∫°o</Modal.Title>
                  </Modal.Header>
                  <Modal.Body>
                    <Row>
                      {Array.isArray(publicExams) && publicExams.length > 0 ? (
                        publicExams.map((exam) => (
                          <Col key={exam.exam_id} md={6} className="mb-3">
                            <Card>
                              <Card.Body>
                                <Card.Title>{exam.exam_name}</Card.Title>
                                <Button
                                  variant="primary"
                                  onClick={() => handleAddExamToClassroom(exam.exam_id)}
                                >
                                  Th√™m v√†o l·ªõp h·ªçc
                                </Button>
                              </Card.Body>
                            </Card>
                          </Col>
                        ))
                      ) : (
                        <p>üì¢ Ch∆∞a c√≥ b√†i thi c√¥ng khai n√†o.</p>
                      )}
                    </Row>
                  </Modal.Body>
                </Modal>
              </>
            )
          }
        </>
      )
      )}

    </div>
  );
};

export default ClassroomPractice;

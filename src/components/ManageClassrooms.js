import React, { useState, useEffect, useCallback } from "react";
import { Button, Card, Row, Col, Modal, Form } from "react-bootstrap";
import axios from "axios";

const ManageClassrooms = ({ teacherId }) => {
  const [classrooms, setClassrooms] = useState([]);
  const [className, setClassName] = useState("");
  const [registrationPassword, setRegistrationPassword] = useState("");
  const [showModal, setShowModal] = useState(false);
  const [selectedClassroom, setSelectedClassroom] = useState(null);
  const [showDetails, setShowDetails] = useState(false);
  const [members, setMembers] = useState([]);

  // ‚úÖ L·∫•y danh s√°ch l·ªõp h·ªçc
  const fetchClassrooms = useCallback(async () => {
    if (!teacherId) return;
    try {
      const response = await axios.get(`http://localhost/react_api/fetch_my_classrooms.php?user_id=${teacherId}`);
      setClassrooms(response.data);
    } catch (error) {
      console.error("‚ùå L·ªói l·∫•y danh s√°ch l·ªõp h·ªçc:", error);
    }
  }, [teacherId]);

  useEffect(() => {
    fetchClassrooms();
  }, [fetchClassrooms]);

  // ‚úÖ L·∫•y danh s√°ch th√†nh vi√™n c·ªßa l·ªõp
  const fetchMembers = async (classroomId) => {
    try {
      const response = await axios.get(`http://localhost/react_api/fetch_members.php?classroom_id=${classroomId}`);
      setMembers(response.data);
    } catch (error) {
      console.error("‚ùå L·ªói l·∫•y danh s√°ch th√†nh vi√™n:", error);
    }
  };

  // ‚úÖ X·ª≠ l√Ω ch·ªçn l·ªõp h·ªçc
  const handleManageClassroom = (classroom) => {
    setSelectedClassroom(classroom);
    setClassName(classroom.class_name);
    setRegistrationPassword(classroom.registration_password || "");
    setShowDetails(true);
    fetchMembers(classroom.classroom_id);
  };

  // ‚úÖ X·ª≠ l√Ω c·∫≠p nh·∫≠t l·ªõp h·ªçc
  const handleUpdateClass = async () => {
    if (!selectedClassroom) return;

    try {
      await axios.post(`http://localhost/react_api/update_classroom.php`, {
        classroom_id: selectedClassroom.classroom_id,
        class_name: className,
        registration_password: registrationPassword,
      });

      setClassrooms((prev) =>
        prev.map((cls) =>
          cls.classroom_id === selectedClassroom.classroom_id
            ? { ...cls, class_name: className, registration_password: registrationPassword }
            : cls
        )
      );

      setShowDetails(false);
      alert("‚úÖ Th√¥ng tin l·ªõp h·ªçc ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!");
    } catch (error) {
      console.error("‚ùå L·ªói c·∫≠p nh·∫≠t l·ªõp h·ªçc:", error);
    }
  };

  // ‚úÖ X·ª≠ l√Ω x√≥a th√†nh vi√™n
  const handleKickMember = async (studentId) => {
    try {
      await axios.post(`http://localhost/react_api/kick_members.php`, {
        classroom_id: selectedClassroom.classroom_id,
        student_id: studentId,
      });

      setMembers((prev) => prev.filter((member) => member.student_id !== studentId));
      alert("‚úÖ ƒê√£ x√≥a th√†nh vi√™n kh·ªèi l·ªõp h·ªçc.");
    } catch (error) {
      console.error("‚ùå L·ªói x√≥a th√†nh vi√™n:", error);
    }
  };

  // ‚úÖ X·ª≠ l√Ω quay l·∫°i danh s√°ch l·ªõp
  const handleBackToList = () => {
    setSelectedClassroom(null);
    setShowDetails(false);
  };

  return (
    <div>
      <Button variant="secondary" onClick={handleBackToList} className="mb-3">
        ‚Üê Quay l·∫°i
      </Button>

      <h2>Qu·∫£n l√Ω l·ªõp h·ªçc</h2>

      {/* Danh s√°ch l·ªõp h·ªçc */}
      {!showDetails && (
        <div>
          <Button variant="primary" className="mb-3" onClick={() => setShowModal(true)}>
            + T·∫°o l·ªõp h·ªçc m·ªõi
          </Button>

          <Row>
            {classrooms.map((classroom) => (
              <Col key={classroom.classroom_id} md={4} className="mb-3">
                <Card style={{ cursor: "pointer" }}>
                  <Card.Body>
                    <Card.Title>{classroom.class_name}</Card.Title>
                    <Card.Subtitle className="mb-2 text-muted">
                      Gi√°o vi√™n: {classroom.teacher_name}
                    </Card.Subtitle>
                    <Card.Text>Ng√†y t·∫°o: {new Date(classroom.created_at).toLocaleString()}</Card.Text>
                    <Button variant="warning" onClick={() => handleManageClassroom(classroom)}>
                      Qu·∫£n l√Ω th√†nh vi√™n & Ch·ªânh s·ª≠a l·ªõp
                    </Button>
                  </Card.Body>
                </Card>
              </Col>
            ))}
          </Row>
        </div>
      )}

      {/* Chi ti·∫øt l·ªõp h·ªçc */}
      {showDetails && selectedClassroom && (
        <div className="mt-4">
          <h3>Chi ti·∫øt l·ªõp h·ªçc</h3>
          <Form>
            <Form.Group controlId="className">
              <Form.Label>T√™n l·ªõp h·ªçc</Form.Label>
              <Form.Control
                type="text"
                value={className}
                onChange={(e) => setClassName(e.target.value)}
              />
            </Form.Group>

            <Form.Group controlId="registrationPassword">
              <Form.Label>M·∫≠t kh·∫©u ƒëƒÉng k√Ω</Form.Label>
              <Form.Control
                type="password"
                value={registrationPassword}
                onChange={(e) => setRegistrationPassword(e.target.value)}
              />
            </Form.Group>

            <Button variant="success" onClick={handleUpdateClass}>
              L∆∞u thay ƒë·ªïi
            </Button>
          </Form>

          {/* Danh s√°ch th√†nh vi√™n */}
          <div className="mt-4">
            <h4>Danh s√°ch th√†nh vi√™n</h4>
            {members.length > 0 ? (
              <ul>
                {members.map((member) => (
                  <li key={member.student_id}>
                    {member.fullname} - ƒêƒÉng k√Ω v√†o: {new Date(member.enrollment_date).toLocaleString()}
                    <Button variant="danger" onClick={() => handleKickMember(member.student_id)} className="ml-2">
                      X√≥a
                    </Button>
                  </li>
                ))}
              </ul>
            ) : (
              <p>üì¢ L·ªõp n√†y ch∆∞a c√≥ th√†nh vi√™n n√†o.</p>
            )}
          </div>
        </div>
      )}

      {/* Modal t·∫°o l·ªõp h·ªçc */}
      <Modal show={showModal} onHide={() => setShowModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>T·∫°o l·ªõp h·ªçc m·ªõi</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group controlId="className">
              <Form.Label>T√™n l·ªõp h·ªçc</Form.Label>
              <Form.Control
                type="text"
                value={className}
                onChange={(e) => setClassName(e.target.value)}
              />
            </Form.Group>

            <Form.Group controlId="password">
              <Form.Label>M·∫≠t kh·∫©u (n·∫øu c√≥)</Form.Label>
              <Form.Control
                type="password"
                value={registrationPassword}
                onChange={(e) => setRegistrationPassword(e.target.value)}
              />
            </Form.Group>

            <Button variant="primary" onClick={handleUpdateClass}>
              T·∫°o l·ªõp
            </Button>
          </Form>
        </Modal.Body>
      </Modal>
    </div>
  );
};

export default ManageClassrooms;
